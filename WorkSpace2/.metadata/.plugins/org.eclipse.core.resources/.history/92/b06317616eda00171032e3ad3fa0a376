package graph;

import java.util.HashMap;

public class LinkedHashGraph<T> {

	private HashMap<String, LinkedNode<T>> graph;

	public LinkedHashGraph() {
		graph = new HashMap<String, LinkedNode<T>>();
	}

	public void addNode(String name, T element) {
		if (graph.containsKey(name)) {
			// throw exception Object already exists;
		} else {
			LinkedNode<T> node = new LinkedNode<T>(element);
			graph.put(name, node);
		}
	}

	public void addEdge(String originNode, String connectingNode, String weight) {

		if (graph.containsKey(originNode) && graph.containsKey(connectingNode)) {

			graph.get(originNode).makeEdge(graph.get(connectingNode), weight);
		} else {
			// throw exceptions; 404 node not found;
		}
	}

	public void remove(String key) {
		if (graph.containsKey(key)) {
			graph.remove(key);
		} else {
			// throw exception 404 node not found
		}
	}

	public LinkedNode<T> getNode(String searchName) {
		return graph.get(searchName);
	}

	public boolean isContains(String key) {
		return graph.containsKey(key);
	}

	public String toString() {
		String str = "";
		return str;
	}
}
