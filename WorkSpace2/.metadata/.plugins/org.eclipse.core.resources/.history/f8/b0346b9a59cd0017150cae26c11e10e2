package graph;
import java.util.*;

public class Graph {
     
    private HashMap<String, Vertex> vertices;
    private HashMap<Integer, Edge> edges;
     
    public Graph(){
        this.vertices = new HashMap<String, Vertex>();
        this.edges = new HashMap<Integer, Edge>();
    }
     
    public Graph(ArrayList<Vertex> vertices){
        this.vertices = new HashMap<String, Vertex>();
        this.edges = new HashMap<Integer, Edge>();
         
        for(Vertex v: vertices){
            this.vertices.put(v.getLabel(), v);
        }
         
    }
     
    public boolean addEdge(Vertex one, Vertex two){
        return addEdge(one, two, 1);
    }
     
    public boolean addEdge(Vertex one, Vertex two, int weight){
        if(one.equals(two)){
            return false;  
        }
        
        Edge e = new Edge(one, two, weight);
        if(edges.containsKey(e.hashCode())){
            return false;
        }
        
        //and that the Edge isn't already incident to one of the vertices
        else if(one.containsNeighbor(e) || two.containsNeighbor(e)){
            return false;
        }
             
        edges.put(e.hashCode(), e);
        one.addNeighbor(e);
        two.addNeighbor(e);
        return true;
    }
     
    public boolean containsEdge(Edge e){
        if(e.getOne() == null || e.getTwo() == null){
            return false;
        }
         
        return this.edges.containsKey(e.hashCode());
    }
     
     
    public Edge removeEdge(Edge e){
       e.getOne().removeNeighbor(e);
       e.getTwo().removeNeighbor(e);
       return this.edges.remove(e.hashCode());
    }
     
    public boolean containsVertex(Vertex vertex){
        return this.vertices.get(vertex.getLabel()) != null;
    }
     
    public Vertex getVertex(String label){
        return vertices.get(label);
    }
     
    public boolean addVertex(Vertex vertex, boolean overwriteExisting){
144
        Vertex current = this.vertices.get(vertex.getLabel());
145
        if(current != null){
146
            if(!overwriteExisting){
147
                return false;
148
            }
149
             
150
            while(current.getNeighborCount() > 0){
151
                this.removeEdge(current.getNeighbor(0));
152
            }
153
        }
154
         
155
         
156
        vertices.put(vertex.getLabel(), vertex);
157
        return true;
158
    }
159
     
160
    /**
161
     *
162
     * @param label The label of the Vertex to remove
163
     * @return Vertex The removed Vertex object
164
     */
165
    public Vertex removeVertex(String label){
166
        Vertex v = vertices.remove(label);
167
         
168
        while(v.getNeighborCount() > 0){
169
            this.removeEdge(v.getNeighbor((0)));
170
        }
171
         
172
        return v;
173
    }
174
     
175
    /**
176
     *
177
     * @return Set<String> The unique labels of the Graph's Vertex objects
178
     */
179
    public Set<String> vertexKeys(){
180
        return this.vertices.keySet();
181
    }
182
     
183
    /**
184
     *
185
     * @return Set<Edge> The Edges of this graph
186
     */
187
    public Set<Edge> getEdges(){
188
        return new HashSet<Edge>(this.edges.values());
189
    }
190
     
191
}
